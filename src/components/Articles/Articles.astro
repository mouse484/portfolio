---
import { format } from 'date-fns';
import Parser from 'rss-parser';
import Icon from '../Icon.astro';
import LinkWithContent from '../LinkWithContent.astro';

const feeds = [
  'https://zenn.dev/mouse_484/feed',
  'https://qiita.com/mouse_484/feed.atom',
];

const parser = new Parser();

const isPlatform = (link = '') => {
  return ['qiita', 'zenn'].find((value) => link.includes(value));
};

const getTime = (isoData = '') => {
  return new Date(isoData).getTime();
};

const allfeed: Parser.Item[] = (
  await Promise.all(
    feeds.map(async (url) => {
      const feed = await parser.parseURL(url);
      return feed.items;
    })
  )
).flat();

const result = allfeed
  .sort((a, b) => getTime(b.isoDate) - getTime(a.isoDate))
  .map(({ title, link, isoDate }) => {
    return {
      title,
      link,
      date: new Date(isoDate || ''),
      platform: isPlatform(link),
    } as const;
  });
---

<div class="mt-8 w-96 mx-auto max-w-[80vw]">
  {
    result.map(({ platform, title, link, date }) => (
      <div class="group">
        <div>{format(date, 'yyyy/MM/dd')}</div>
        {link && (
          <LinkWithContent href={link}>
            <Icon
              pack="simple-icons"
              name={platform || ''}
              size="md"
            />
            <span class="truncate group-hover:break-normal group-hover:whitespace-normal">
              {title}
            </span>
          </LinkWithContent>
        )}
      </div>
    ))
  }
</div>
